const { 
    Client, GatewayIntentBits, AttachmentBuilder, SlashCommandBuilder,
    ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, 
    ButtonBuilder, ButtonStyle, InteractionType, EmbedBuilder 
} = require('discord.js');
const Canvas = require('@napi-rs/canvas');
require('dotenv').config();

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

const guildId = process.env.GUILD_ID;
const roleId = process.env.VERIFIED_ROLE_ID;
const modLogChannelId = process.env.MOD_LOG_CHANNEL_ID;
const welcomeChannelId = process.env.WELCOME_CHANNEL_ID;
const token = process.env.TOKEN;

const captchas = new Map();
let totalVerified = 0;

// --- Fun√ß√£o CAPTCHA ---
function generateCaptchaText(length = 6){
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let text='';
    for(let i=0;i<length;i++) text+=chars.charAt(Math.floor(Math.random()*chars.length));
    return text;
}

async function createCaptchaImage(text){
    const canvas = Canvas.createCanvas(250,100);
    const ctx = canvas.getContext('2d');

    ctx.fillStyle='#23272A';
    ctx.fillRect(0,0,250,100);

    for(let i=0;i<5;i++){
        ctx.strokeStyle=`hsl(${Math.random()*360},70%,50%)`;
        ctx.beginPath();
        ctx.moveTo(Math.random()*250, Math.random()*100);
        ctx.lineTo(Math.random()*250, Math.random()*100);
        ctx.stroke();
    }

    ctx.font='bold 40px sans-serif';
    for(let i=0;i<text.length;i++){
        const char=text[i];
        const x=30+i*35;
        const y=65+Math.random()*5;
        const angle=(Math.random()-0.5)*0.3;
        ctx.save();
        ctx.translate(x,y);
        ctx.rotate(angle);
        ctx.fillStyle=`hsl(${Math.random()*360},80%,70%)`;
        ctx.fillText(char,0,0);
        ctx.restore();
    }

    for(let i=0;i<80;i++){
        ctx.fillStyle=`hsl(${Math.random()*360},80%,50%)`;
        ctx.fillRect(Math.random()*250, Math.random()*100,2,2);
    }

    const buffer = await canvas.encode('png');
    return new AttachmentBuilder(buffer, { name:'captcha.png' });
}

// --- Registra comando /verificar ---
client.once('ready', async ()=>{
    console.log(`Logado como ${client.user.tag}`);

    const commands = [
        new SlashCommandBuilder().setName('verificar').setDescription('Verifica√ß√£o via CAPTCHA')
    ].map(c=>c.toJSON());

    const { REST } = require('discord.js');
    const { Routes } = require('discord.js');
    const rest = new REST({ version:'10' }).setToken(token);
    await rest.put(Routes.applicationGuildCommands(client.user.id, guildId), { body: commands });
});

// --- Intera√ß√µes ---
client.on('interactionCreate', async interaction=>{
    if(interaction.isChatInputCommand() && interaction.commandName==='verificar'){
        const guild = client.guilds.cache.get(guildId);
        const member = guild.members.cache.get(interaction.user.id);

        if(member.roles.cache.has(roleId)){
            return interaction.reply({ content: '‚ùå Voc√™ j√° est√° verificado(a)!', ephemeral: true });
        }

        const captchaText = generateCaptchaText();
        const buffer = await createCaptchaImage(captchaText);

        captchas.set(interaction.user.id,{
            text: captchaText,
            attempts:0,
            timeout: setTimeout(()=>{
                captchas.delete(interaction.user.id);
                interaction.followUp({content:'‚è∞ Seu CAPTCHA expirou. Use /verificar novamente.', ephemeral:true});
            }, 2*60*1000)
        });

        const button = new ButtonBuilder()
            .setCustomId('abrirModal')
            .setLabel('Digite o CAPTCHA')
            .setStyle(ButtonStyle.Primary);

        await interaction.reply({ content:'Aqui est√° seu CAPTCHA:', files:[buffer], ephemeral:true, components:[new ActionRowBuilder().addComponents(button)] });
    }

    // --- Bot√£o CAPTCHA ---
    if(interaction.isButton() && interaction.customId==='abrirModal'){
        const modal = new ModalBuilder()
            .setCustomId('captchaModal')
            .setTitle('Digite o CAPTCHA')
            .addComponents(
                new ActionRowBuilder().addComponents(
                    new TextInputBuilder()
                        .setCustomId('captchaInput')
                        .setLabel('Digite o que v√™ na imagem')
                        .setStyle(TextInputStyle.Short)
                        .setRequired(true)
                )
            );
        await interaction.showModal(modal);
    }

    // --- Modal submit ---
    if(interaction.type===InteractionType.ModalSubmit && interaction.customId==='captchaModal'){
        const userCaptcha = captchas.get(interaction.user.id);
        if(!userCaptcha){
            return interaction.reply({ content:'‚ùå Nenhum CAPTCHA ativo ou expirado. Use /verificar novamente.', ephemeral:true });
        }

        const answer = interaction.fields.getTextInputValue('captchaInput').toUpperCase();
        userCaptcha.attempts++;

        if(answer === userCaptcha.text){
            clearTimeout(userCaptcha.timeout);
            const guild = client.guilds.cache.get(guildId);
            const member = guild.members.cache.get(interaction.user.id);
            await member.roles.add(roleId);
            captchas.delete(interaction.user.id);

            totalVerified++;

            const successEmbed = new EmbedBuilder()
                .setTitle('‚úÖ Verifica√ß√£o conclu√≠da!')
                .setDescription(`Parab√©ns ${interaction.user}, voc√™ foi verificado!\nüéâ Total verificados: ${totalVerified}`)
                .setColor('#00FF00');

            await interaction.reply({ embeds:[successEmbed], ephemeral:true });

            // Welcome embed
            const welcomeChannel = client.channels.cache.get(welcomeChannelId);
            if(welcomeChannel){
                const welcomeEmbed = new EmbedBuilder()
                    .setColor('#8A2BE2')
                    .setTitle(`üéâ Bem-vindo(a), ${interaction.user.username}!`)
                    .setDescription(
                        `Seja muito bem-vindo(a) ao servidor! üíú\n\n` +
                        `Voc√™ agora possui o cargo de verificado(a) ‚úÖ\n\n` +
                        `üìú Confira as regras: <#1410608732110590072>\n` +
                        `üõí Veja nossos produtos: <#1410608739513401368>`
                    )
                    .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
                    .setImage('https://media.discordapp.net/attachments/1190517420822118421/1328366691964555274/6e85f7e0111ac569249afb790efff78f.gif')
                    .setFooter({ text: 'Divirta-se e participe!', iconURL: client.user.displayAvatarURL() })
                    .setTimestamp();

                welcomeChannel.send({ embeds: [welcomeEmbed] });
            }

        } else {
            const logChannel = client.channels.cache.get(modLogChannelId);
            if(logChannel) logChannel.send(`‚ùå ${interaction.user.tag} errou o CAPTCHA (${userCaptcha.attempts} tentativa(s))`);

            if(userCaptcha.attempts >=3){
                clearTimeout(userCaptcha.timeout);
                captchas.delete(interaction.user.id);
                return interaction.reply({ content:'‚ùå Limite de tentativas atingido. Use /verificar novamente.', ephemeral:true });
            }

            return interaction.reply({ content:`‚ùå CAPTCHA incorreto. Tentativa ${userCaptcha.attempts}/3`, ephemeral:true });
        }
    }
});

// --- Servidor web simples ---
const express = require('express');
const app = express();
const PORT = 3000;
app.get('/', (req, res)=>res.send('Bot est√° online ‚úÖ'));
app.listen(PORT, ()=>console.log(`Servidor web rodando na porta ${PORT}`));

// --- Login ---
client.login(token);
